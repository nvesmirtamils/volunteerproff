/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VolunteerProofInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "awardBadge"
      | "badge"
      | "getPublicRecordCount"
      | "getPublicRecordWindow"
      | "getRecord"
      | "getTotalHours"
      | "getUserRecordIds"
      | "protocolId"
      | "publicRecordCount"
      | "submitRecord"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RecordSubmitted"): EventFragment;

  encodeFunctionData(
    functionFragment: "awardBadge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "badge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPublicRecordCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicRecordWindow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalHours",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRecordIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicRecordCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRecord",
    values: [BytesLike, string, BytesLike, BytesLike, BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "awardBadge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "badge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPublicRecordCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicRecordWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalHours",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRecordIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicRecordCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitRecord",
    data: BytesLike
  ): Result;
}

export namespace RecordSubmittedEvent {
  export type InputTuple = [
    user: AddressLike,
    recordId: BigNumberish,
    isPublic: boolean,
    activityHash: BytesLike,
    ipfsCid: string
  ];
  export type OutputTuple = [
    user: string,
    recordId: bigint,
    isPublic: boolean,
    activityHash: string,
    ipfsCid: string
  ];
  export interface OutputObject {
    user: string;
    recordId: bigint;
    isPublic: boolean;
    activityHash: string;
    ipfsCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VolunteerProof extends BaseContract {
  connect(runner?: ContractRunner | null): VolunteerProof;
  waitForDeployment(): Promise<this>;

  interface: VolunteerProofInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  awardBadge: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  badge: TypedContractMethod<[], [string], "view">;

  getPublicRecordCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getPublicRecordWindow: TypedContractMethod<
    [startId: BigNumberish, count: BigNumberish],
    [bigint[]],
    "view"
  >;

  getRecord: TypedContractMethod<
    [id: BigNumberish],
    [
      [string, string, string, string, boolean, string, bigint] & {
        activityHash: string;
        ipfsCid: string;
        encHours: string;
        date: string;
        isPublic: boolean;
        user: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getTotalHours: TypedContractMethod<[user: AddressLike], [string], "view">;

  getUserRecordIds: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  publicRecordCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  submitRecord: TypedContractMethod<
    [
      activityHash: BytesLike,
      ipfsCid: string,
      extHours: BytesLike,
      extDate: BytesLike,
      inputProof: BytesLike,
      isPublic: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "awardBadge"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "badge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPublicRecordCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPublicRecordWindow"
  ): TypedContractMethod<
    [startId: BigNumberish, count: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecord"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [string, string, string, string, boolean, string, bigint] & {
        activityHash: string;
        ipfsCid: string;
        encHours: string;
        date: string;
        isPublic: boolean;
        user: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalHours"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserRecordIds"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "publicRecordCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitRecord"
  ): TypedContractMethod<
    [
      activityHash: BytesLike,
      ipfsCid: string,
      extHours: BytesLike,
      extDate: BytesLike,
      inputProof: BytesLike,
      isPublic: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RecordSubmitted"
  ): TypedContractEvent<
    RecordSubmittedEvent.InputTuple,
    RecordSubmittedEvent.OutputTuple,
    RecordSubmittedEvent.OutputObject
  >;

  filters: {
    "RecordSubmitted(address,uint256,bool,bytes32,string)": TypedContractEvent<
      RecordSubmittedEvent.InputTuple,
      RecordSubmittedEvent.OutputTuple,
      RecordSubmittedEvent.OutputObject
    >;
    RecordSubmitted: TypedContractEvent<
      RecordSubmittedEvent.InputTuple,
      RecordSubmittedEvent.OutputTuple,
      RecordSubmittedEvent.OutputObject
    >;
  };
}
