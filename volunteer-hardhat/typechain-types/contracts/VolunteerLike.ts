/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VolunteerLikeInterface extends Interface {
  getFunction(
    nameOrSignature: "getLike" | "liked" | "likes" | "toggleLike"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Liked"): EventFragment;

  encodeFunctionData(
    functionFragment: "getLike",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liked",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "likes", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "toggleLike",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getLike", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "likes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toggleLike", data: BytesLike): Result;
}

export namespace LikedEvent {
  export type InputTuple = [
    recordId: BigNumberish,
    user: AddressLike,
    like: boolean,
    total: BigNumberish
  ];
  export type OutputTuple = [
    recordId: bigint,
    user: string,
    like: boolean,
    total: bigint
  ];
  export interface OutputObject {
    recordId: bigint;
    user: string;
    like: boolean;
    total: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VolunteerLike extends BaseContract {
  connect(runner?: ContractRunner | null): VolunteerLike;
  waitForDeployment(): Promise<this>;

  interface: VolunteerLikeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLike: TypedContractMethod<
    [recordId: BigNumberish, user: AddressLike],
    [[boolean, bigint]],
    "view"
  >;

  liked: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  likes: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  toggleLike: TypedContractMethod<
    [recordId: BigNumberish],
    [[boolean, bigint] & { like: boolean; total: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLike"
  ): TypedContractMethod<
    [recordId: BigNumberish, user: AddressLike],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "liked"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "likes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toggleLike"
  ): TypedContractMethod<
    [recordId: BigNumberish],
    [[boolean, bigint] & { like: boolean; total: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "Liked"
  ): TypedContractEvent<
    LikedEvent.InputTuple,
    LikedEvent.OutputTuple,
    LikedEvent.OutputObject
  >;

  filters: {
    "Liked(uint256,address,bool,uint256)": TypedContractEvent<
      LikedEvent.InputTuple,
      LikedEvent.OutputTuple,
      LikedEvent.OutputObject
    >;
    Liked: TypedContractEvent<
      LikedEvent.InputTuple,
      LikedEvent.OutputTuple,
      LikedEvent.OutputObject
    >;
  };
}
