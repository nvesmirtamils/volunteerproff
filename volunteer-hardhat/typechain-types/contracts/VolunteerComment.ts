/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VolunteerCommentInterface extends Interface {
  getFunction(
    nameOrSignature: "addComment" | "getCount" | "getWindow"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Commented"): EventFragment;

  encodeFunctionData(
    functionFragment: "addComment",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWindow",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addComment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWindow", data: BytesLike): Result;
}

export namespace CommentedEvent {
  export type InputTuple = [
    recordId: BigNumberish,
    user: AddressLike,
    text: string
  ];
  export type OutputTuple = [recordId: bigint, user: string, text: string];
  export interface OutputObject {
    recordId: bigint;
    user: string;
    text: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VolunteerComment extends BaseContract {
  connect(runner?: ContractRunner | null): VolunteerComment;
  waitForDeployment(): Promise<this>;

  interface: VolunteerCommentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addComment: TypedContractMethod<
    [recordId: BigNumberish, text: string],
    [void],
    "nonpayable"
  >;

  getCount: TypedContractMethod<[recordId: BigNumberish], [bigint], "view">;

  getWindow: TypedContractMethod<
    [recordId: BigNumberish, start: BigNumberish, count: BigNumberish],
    [
      [string[], string[], bigint[]] & {
        users: string[];
        texts: string[];
        timestamps: bigint[];
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addComment"
  ): TypedContractMethod<
    [recordId: BigNumberish, text: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCount"
  ): TypedContractMethod<[recordId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWindow"
  ): TypedContractMethod<
    [recordId: BigNumberish, start: BigNumberish, count: BigNumberish],
    [
      [string[], string[], bigint[]] & {
        users: string[];
        texts: string[];
        timestamps: bigint[];
      }
    ],
    "view"
  >;

  getEvent(
    key: "Commented"
  ): TypedContractEvent<
    CommentedEvent.InputTuple,
    CommentedEvent.OutputTuple,
    CommentedEvent.OutputObject
  >;

  filters: {
    "Commented(uint256,address,string)": TypedContractEvent<
      CommentedEvent.InputTuple,
      CommentedEvent.OutputTuple,
      CommentedEvent.OutputObject
    >;
    Commented: TypedContractEvent<
      CommentedEvent.InputTuple,
      CommentedEvent.OutputTuple,
      CommentedEvent.OutputObject
    >;
  };
}
